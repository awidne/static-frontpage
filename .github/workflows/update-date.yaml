name: Update Markdown Dates
on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  update-dates:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      pull-requests: write  # If you want to create PRs later

    steps:
      # 1. Checkout with EXPLICIT write permissions
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true  # ESSENTIAL for subsequent pushes
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Python setup
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      # 3. Install dependencies
      - name: Install requests
        run: pip install requests
          
      # 4. Run updater with FAIL-SAFE change detection
      - name: Run date updater
        id: updater
        run: |
          python scripts/update-date.py || true
          # FAIL-SAFE change detection
          if [ -n "$(git ls-files -m content/)" ] || [ -n "$(git ls-files -o content/)" ]; then
            echo "changes_made=true" >> $GITHUB_OUTPUT
            git status  # Debug output
          else
            echo "changes_made=false" >> $GITHUB_OUTPUT
          fi

      # 5. COMMIT & PUSH
      - name: Commit and push changes
        if: steps.updater.outputs.changes_made == 'true'
        env:
          # Uses the SAME token as checkout
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -A content/
          git commit -m "Auto-update content dates [skip ci]"
          # PROVEN push syntax that always works
          git push "https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git" HEAD:${{ github.ref }}

      - name: Trigger Hugo build
        if: steps.updater.outputs.changes_made == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'hugo.yaml',
                ref: context.ref,
              });
              console.log('Successfully triggered Hugo workflow');
            } catch (error) {
              console.error('Trigger failed:', error);
              // Fallback: Create a repository_dispatch event
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event_type: 'trigger-hugo-build',
              });
            }